openapi: 3.0.0
info:
  title: Library API
  version: 1.0
  contact:
    email: searcheulong@gmail.com
  description: A simple Express Library API
  servers:
    -url: "http://localhost:8080"
    description: This is my local server
    -url: "http://company.com"
    description: This is my company server

schemes: [http, https]

components:
  schemas:
    Book:
      type: object
      required:
        - title
        - author
      properties:
        id:
          type: string
          description: The auto-generated id of the book
        title:
          type: string
          description: The book title
        author:
          type: string
          description: The book author
      example:
        id: d5fE_asz
        title: The New Turing Omnibus
        author: Alexander K. Dewdney
  parameters:
    idParam:      # Can be referenced via '#/components/parameters/idParam'
      in: path
      name: id
      schema:
        type: string
      required: true
      description: The book id
  responses:
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The book was not found.

tags:
  name: Books
  description: The books managing API

paths:
  /books:
    get:
      summary: Returns the list of all the books
      tags: [Books]
      responses:
        200:
          description: The list of the books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The book was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        500:
          description: Some server error
  /books/{id}:
    get:
      summary: Get the book by id
      tags: [Books]
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: The book description by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          $ref: '#components/responses/404NotFound'
    put:
      summary: Update the book by the id
      tags: [Books]
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The book was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          $ref: '#components/responses/404NotFound'
        500:
          description: Some error happened
    delete:
      summary: Remove the book by id
      tags: [Books]
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: The book was deleted
        404:
          $ref: '#components/responses/404NotFound'